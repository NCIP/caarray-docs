USER STORY: Parse Nimblegen Pair Files

As a Data Owner, I want to import a Nimblegen data file in the "pair report" text format and associate it to biomaterials in an experiment.

1. Flow:

* The user (Data Owner) uploads a file into a gene expression experiment and changes the file type to "Nimblegen Raw Pair" or "Nimblegen Normalized Pair".
* The user chooses to import the file (possibly along with other files).
* The system parses and validates the file to make sure:
  + the file conforms to the expected format (see section 2).
  + every probe name in the data file can be correlated to a probe name in the array design.
* If the file passes validation, then the data values for the appropriate quantitation types (see section 2) are stored and associated to probes.
* If the file fails validation, the file ends up in the Import Failed state.

2. Expected format of the Pair file:

* The Pair Report (typically *.pair or *.txt) data file format is a tab-delimited text file, and provides sequence, probe, and signal intensity information for each data channel.
* The Raw Pair and Normalized Pair reports are essentially the same file format. The Normalized Pair report contains the normalized signal intensities output by the RMA algorithm.
* A Raw Pair report must be referenced in the Array Data File column of an accompanying SDRF (if present).
* A Normalized Pair report must be referenced in the Derived Array Data File column of an accompanying SDRF (if present).
* The report optionally contains a report header line (first non-whitespace character = #) which is ignored by the system.
* The next non-empty line encountered is the column header line.
* These are the columns that are parsed, and they are all mandatory, else the system throws a validation error.
  + GENE_EXPR_OPTION: The CONTAINER name from the design file if analysis was done by container or the text ÒWHOLE ARRAYÓ if all replicate probe sets were analyzed as a single set. By default, analysis is done by container. Containers are commonly named BLOCK1, BLOCK2, etc. or FORWARD1, FORWARD2, etc.
  + SEQ_ID: The NimbleGen sequence identifier, used to group together sets of probes for a gene or region of interest within a design. The Sequence ID is typically <=50 characters.
  + PROBE_ID: The NimbleGen probe identifier, used to identify individual probe sequences within a design. The Probe ID is typically <=50 characters.
  + MATCH_INDEX: An integer that ties sets of probes.
  + PM: The signal intensity for a perfect match for the probe pair. The value range is 0 to 65,535.
  + MM: The signal intensity for a mismatch for the probe pair. The value range is 0 to 65,535. A value of 0 is used for perfect match designs.
  + X: X coordinate of the feature on the image. Integer. The range of this value is typically 1 to 1050.
  + Y: Y coordinate of the feature on the image. Integer. The range of this value is typically 1 to 4200.
* Case is unimportant in the column names.
* The order of columns is unimportant.
* Additional columns not described in this section may be present and should be ignored while parsing.
* The values for the quantitation types should be associated with PhysicalProbes, by matching the probe name to "<GENE_EXPR_OPTION>|<SEQ_ID>|<PROBE_ID>".
* Note: A combined pair report is also a .pair file, but this is not supported, and will currently throw a validation error. A combined pair report provides signal intensity information for all arrays that utilize a specific array design.

3. Example files:

Example files are under example_files/gene_expression/*pair.txt and example_files/cgh/*pair.txt.

4. Issues:
* If GENE_EXPR_OPTION turns out to be "WHOLE ARRAY" instead of CONTAINER names, then what happens? We won't be able to match up to probes in the array design. --- Spoke to Jim McCusker and Kyle Munn, and we should never encounter this situation.
* Why are X and Y in the Pair files treated as quantitation types? Why are these values even present in Pair files? --- Not sure about this, but our current approach of storing them as quantitation types is sufficient.
* Why is CONTAINER (block), SEQ_ID (gene) and PROBE_ID used to identify probes? This is not typical in other types of arrays. --- Spoke to Jim McCusker and Kyle Munn, and the reason is that PROBE_IDs are not guaranteed to be unique, e.g., in tiling arrays with mixed density.


